// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Graph.RBAC.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Request parameters for GetObjectsByObjectIds API call
    /// </summary>
    public partial class GetObjectsParameters
    {
        /// <summary>
        /// Initializes a new instance of the GetObjectsParameters class.
        /// </summary>
        public GetObjectsParameters() { }

        /// <summary>
        /// Initializes a new instance of the GetObjectsParameters class.
        /// </summary>
        public GetObjectsParameters(bool? includeDirectoryObjectReferences, IList<string> objectIds = default(IList<string>), IList<string> types = default(IList<string>))
        {
            ObjectIds = objectIds;
            Types = types;
            IncludeDirectoryObjectReferences = includeDirectoryObjectReferences;
        }

        /// <summary>
        /// Requested object Ids
        /// </summary>
        [JsonProperty(PropertyName = "objectIds")]
        public IList<string> ObjectIds { get; set; }

        /// <summary>
        /// Requested object types
        /// </summary>
        [JsonProperty(PropertyName = "types")]
        public IList<string> Types { get; set; }

        /// <summary>
        /// If true, also searches for object ids in the partner tenant
        /// </summary>
        [JsonProperty(PropertyName = "includeDirectoryObjectReferences")]
        public bool? IncludeDirectoryObjectReferences { get; set; }

        /// <summary>
        /// Validate the object. Throws ArgumentException or ArgumentNullException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (IncludeDirectoryObjectReferences == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IncludeDirectoryObjectReferences");
            }
        }
    }
}
